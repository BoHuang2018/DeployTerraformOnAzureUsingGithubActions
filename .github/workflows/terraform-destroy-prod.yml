name: 'Terraform-Prod-Destroyer'
run-name: ${{ github.actor }} is destroying Azure Prod Environment.

on:
  push:
    branches:
      - destroy-prod
    paths:
      - terraform-prod/**
  pull_request:
    branches:
      - destroy-prod
    paths:
      - terraform-prod/**

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform-Destroy-Prod'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_DEFAULT }}
    runs-on: ubuntu-latest
    environment: staging

    # use the bash shell regardless of the Github Actions runner is unbuntu/macos/windows
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the Github Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with
      # a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform-prod
        run: terraform init

      # Generate an execution plan for Terraform
      - name: Terraform Plan Destroy
        working-directory: ./terraform-prod
        run: terraform plan -destroy

      # Apply Terraform changes
      - name: Terraform Apply Destroy
        if: github.ref == 'refs/heads/destroy-prod' && github.event_name == 'push'
        working-directory: ./terraform-prod
        run: terraform apply -destroy -auto-approve