name: 'Terraform-Prod'

on:
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    # The job will be implemented when a PR is merge to main branch.
#    if: github.event_name == 'pull_request'
#        && github.event.action == 'closed'
#        && github.event.pull_request.merged == true
#    if: ${{ github.event.pull_request.merged }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_DEFAULT }}
    runs-on: ubuntu-latest
    environment: production
    
    # use the bash shell regardless of the Github Actions runner is unbuntu/macos/windows
    defaults: 
      run:
        shell: bash
        
    steps:
      # Checkout the repository to the Github Actions runner
      - name: Checkout 
        uses: actions/checkout@v3

      # Install the lastest version of Terraform CLI and configure the Terraform CLI configuration file with 
      # a Terraform Cloud user API token
      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, 
      # loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Generate an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false

      # Apply Terraform changes
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false
